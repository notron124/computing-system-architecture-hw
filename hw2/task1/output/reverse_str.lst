     1                                  bits 64
     2                                  default rel
     3                                  global _start
     4                                  
     5                                  section .data
     6 00000000 577269746520736F6D-         write_msg db "Write some string: ", 0
     6 00000009 6520737472696E673A-
     6 00000012 2000               
     7                                      write_msg_len  equ $ - write_msg
     8 00000014 537472696E67207368-         err_empty_str db "String should contain at least one character, try again", 10   ; Добавить краткое описание ошибок
     8 0000001D 6F756C6420636F6E74-
     8 00000026 61696E206174206C65-
     8 0000002F 617374206F6E652063-
     8 00000038 68617261637465722C-
     8 00000041 207472792061676169-
     8 0000004A 6E0A               
     9                                      err_empty_str_len equ $ - err_empty_str
    10                                  
    11                                  section .bss
    12 00000000 <res 400h>                  input resb 1024             ; 1KB буффер для входных данных
    13 00000400 <res 400h>                  reversed_str resb 1024      ; 1KB буффер для "перевернутой" строки
    14                                  
    15                                  section .text
    16                                  _start:
    17 00000000 EB00                        jmp read_stdin
    18                                  
    19                                  ; Чтение из stdin
    20                                  read_stdin:
    21 00000002 B800000000                  mov rax, 0                      ; 0 - sys_read
    22 00000007 BF00000000                  mov rdi, 0                      ; 0 - stdin
    23 0000000C 48BE-                       mov rsi, input                  ; передаем указатель на массив, в который попадут введенные данные
    23 0000000E [0000000000000000] 
    24 00000016 BA00040000                  mov rdx, 1024 
    25 0000001B 0F05                        syscall
    26                                  
    27 0000001D 4885C0                      test rax, rax                   ; Проверка на корректное вовзращенное значение (>=0)
    28 00000020 0F8886000000                js exit_with_error
    29                                  
    30 00000026 803D(00000000)0A            cmp byte [input], 0x0A          ; Проверка на строку, стостоящую только из перевода каретки 
    31 0000002D 740B                        je empty_string_warning         ; Переход, если первый знак в input == 0x0A
    32                                  
    33 0000002F 4889C3                      mov rbx, rax                    ; Сохраняем длину строки
    34 00000032 4889D9                      mov rcx, rbx                    ; Счетчик от конца строки
    35 00000035 48FFC9                      dec rcx                         ; Игнорируем перевод каретки
    36                                  
    37 00000038 EB17                        jmp flip_string
    38                                  
    39                                  ; Сообщение о пустой строке
    40                                  empty_string_warning:
    41 0000003A 49B9-                       mov r9, err_empty_str           ; Передаем указатель на строку с информацтей об ошибке 
    41 0000003C [1400000000000000] 
    42 00000044 41BA38000000                mov r10, err_empty_str_len      ; Передаем ее длину
    43                                      
    44 0000004A E839000000                  call write_stdout                ; Вызываем функцию записи в stdout
    45                                  
    46 0000004F EBB1                        jmp read_stdin                  ; Повторяем попытку получить корректную строку от пользователя
    47                                  
    48                                  ; Разворот строки
    49                                  flip_string:
    50 00000051 48FFC9                      dec rcx                         ; уменьшаем счетчик, который указывает на конец input
    51 00000054 7812                        js terminate_string             ; если он стал отрицательным, значит инвесия закончена - выходим
    52                                  
    53 00000056 8A81[00000000]              mov al, [input + rcx]           ; Получаем последний знак на данный момент 
    54                                                                      ; al - младший байт регистра RAX, в данном случае необходим, так как данные длиной 1 байт 
    55 0000005C 418880[00040000]            mov [reversed_str + r8], al     ; помещаем последний знак в начало rersed_str
    56 00000063 49FFC0                      inc r8
    57                                  
    58 00000066 EBE9                        jmp flip_string                 ; Повторяем, пока не обработаем все знаки
    59                                  
    60                                  ; Добавить перевод каретки в конец строки
    61                                  terminate_string: 
    62 00000068 B00A                        mov al, 10
    63 0000006A 418880[00040000]            mov [reversed_str + r8], al     ; Перевод каретки
    64 00000071 49FFC0                      inc r8
    65                                  
    66 00000074 49B9-                       mov r9, reversed_str
    66 00000076 [0004000000000000] 
    67 0000007E 4D89C2                      mov r10, r8
    68                                  
    69 00000081 E802000000                  call write_stdout
    70                                      
    71 00000086 EB18                        jmp exit                        ; Проверка на ошибку записи в stdout
    72                                                                      ; происходит в функции записи, так что тут можно не проверять
    73                                  
    74                                  ; Запись в stdout
    75                                  write_stdout:
    76 00000088 B801000000                  mov rax, 1                      ; 1 - sys_write
    77 0000008D BF01000000                  mov rdi, 1                      ; 1 - stdout
    78 00000092 4C89CE                      mov rsi, r9                     ; Передать указатель на reserved_str буффер
    79 00000095 4C89D2                      mov rdx, r10                    ; Передать размер прочитанной строки
    80 00000098 0F05                        syscall
    81                                  
    82 0000009A 4839C2                      cmp rdx, rax                    ; Проверить, что все данные были записаны в stdout
    83 0000009D 750D                        jnz exit_with_error
    84 0000009F C3                          ret
    85                                  
    86                                  ; Выход
    87                                  exit:
    88 000000A0 B83C000000                  mov rax, 60
    89 000000A5 BF00000000                  mov rdi, 0                  ; Возвращаем 0 при успешном завершении
    90 000000AA 0F05                        syscall
    91                                  
    92                                  ; Выход из программы с ошибкой
    93                                  exit_with_error:
    94                                      ; mov rax, 1
    95                                      ; mov rdi, 2
    96                                      ; mov rsi, err_msg
    97                                      ; mov rdx, err_msg_len
    98                                      ; syscall
    99                                  
   100 000000AC B83C000000                  mov rax, 60
   101 000000B1 BF01000000                  mov rdi, 1
   102 000000B6 0F05                        syscall
