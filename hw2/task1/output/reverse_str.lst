     1                                  bits 64
     2                                  default rel
     3                                  global _start
     4                                  
     5                                  section .data
     6 00000000 577269746520736F6D-         write_msg db "Write some string: ", 0
     6 00000009 6520737472696E673A-
     6 00000012 2000               
     7                                      write_msg_len  equ $ - write_msg
     8 00000014 4572726F722E2E2E0A          err_msg db "Error...", 10   ; Добавить краткое описание ошибок
     9                                      err_msg_len equ $ - err_msg
    10                                  
    11                                  section .bss
    12 00000000 <res 400h>                  input resb 1024             ; 1KB буффер для входных данных
    13 00000400 <res 400h>                  reversed_str resb 1024      ; 1KB буффер для "перевенутой" строки
    14                                  
    15                                  section .text
    16                                  _start:
    17 00000000 EB00                        jmp read_stdin
    18                                  
    19                                  ; Чтение из stdin
    20                                  read_stdin:
    21 00000002 B800000000                  mov rax, 0                  ; 0 - sys_read
    22 00000007 BF00000000                  mov rdi, 0                  ; 0 - stdin
    23 0000000C 48BE-                       mov rsi, input              ; передаем указатель на массив, в который попадут введенные данные
    23 0000000E [0000000000000000] 
    24 00000016 BA00040000                  mov rdx, 1024 
    25 0000001B 0F05                        syscall
    26                                  
    27 0000001D 4885C0                      test rax, rax               ; Проверка на корректное вовзращенное значение (>=0)
    28 00000020 785A                        js exit_with_error
    29                                  
    30 00000022 4889C3                      mov rbx, rax                ; Сохраняем длину строки
    31 00000025 4889D9                      mov rcx, rbx                ; Счетчик от конца строки
    32 00000028 48FFC9                      dec rcx                     ; Игнорируем перевод каретки
    33                                  
    34 0000002B EB00                        jmp flip_string
    35                                  
    36                                  ; Разворот строки
    37                                  flip_string:
    38 0000002D 48FFC9                      dec rcx                      ; уменьшаем счетчик, который указывает на конец input
    39 00000030 7812                        js write_stdout              ; если он стал отрицательным, значит инвесия закончена - выходим
    40                                  
    41 00000032 8A81[00000000]              mov al, [input + rcx]        ; Получаем последний знак на данный момент 
    42                                                                   ; al - младший байт регистра RAX, в данном случае необходим, так как данные длиной 1 байт 
    43 00000038 418880[00040000]            mov [reversed_str + r8], al  ; помещаем последний знак в начало rersed_str
    44 0000003F 49FFC0                      inc r8
    45                                  
    46 00000042 EBE9                        jmp flip_string              ; Повторяем, пока не обработаем все знаки
    47                                  
    48                                  ; Запись в stdout
    49                                  write_stdout:
    50 00000044 B00A                        mov al, 10
    51 00000046 418880[00040000]            mov [reversed_str + r8], al   ; Перевод каретки
    52 0000004D 49FFC0                      inc r8
    53                                  
    54 00000050 B801000000                  mov rax, 1                      ; 1 - sys_write
    55 00000055 BF01000000                  mov rdi, 1                      ; 1 - stdout
    56 0000005A 48BE-                       mov rsi, reversed_str           ; Передать указатель на reserved_str буффер
    56 0000005C [0004000000000000] 
    57 00000064 4C89C2                      mov rdx, r8                     ; Передать размер прочитанной строки
    58 00000067 0F05                        syscall
    59                                  
    60 00000069 4839C2                      cmp rdx, rax                ; Проверить, что все данные были записаны в stdout
    61 0000006C 750E                        jnz exit_with_error
    62                                      
    63 0000006E EB00                        jmp exit
    64                                  
    65                                  ; Выход
    66                                  exit:
    67 00000070 B83C000000                  mov rax, 60
    68 00000075 BF00000000                  mov rdi, 0                  ; Возвращаем 0 при успешном завершении
    69 0000007A 0F05                        syscall
    70                                  
    71                                  ; Выход из программы с ошибкой
    72                                  exit_with_error:
    73 0000007C B801000000                  mov rax, 1
    74 00000081 BF02000000                  mov rdi, 2
    75 00000086 48BE-                       mov rsi, err_msg
    75 00000088 [1400000000000000] 
    76 00000090 BA09000000                  mov rdx, err_msg_len
    77 00000095 0F05                        syscall
    78                                  
    79 00000097 B83C000000                  mov rax, 60
    80 0000009C BF01000000                  mov rdi, 1
    81 000000A1 0F05                        syscall
